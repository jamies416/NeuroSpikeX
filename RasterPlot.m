function [raster, raster_fig] = RasterPlot(smooth_signal, calcium_transients, signal_info, timePointName)

%% Function that creates a raster for the dataset
%
% Need to run ProcessNeuroCa.m and then smoothCalciumSignals.m prior to this function
%
% INPUTS:
% smooth_signal = smoothed dF/F of every cell (generated by "smoothCalciumSignals.m")
%
% pc_locs = frame # of each calcium transient peak in each cell 
%
% time_axis = % time_axis = time (seconds)
%
% f_end = variable calculated in f_end to ensure a standard signal window of 120 seconds
% (created using "ProcessNeuroCa.m")
%
% OUTPUTS
% raster = matrix of 0's and 1's to represent where calcium transient peaks
% are located in the entire network (matrix includes both active and
% inactive cells)
%
% raster_fig = standard raster figure to view entire network activity

%% EXTRACT RELEVANT VARIABLES FROM STRUCT

active_cells = calcium_transients.active_cells;
pk_locs = calcium_transients.peak_locs;
time_axis = signal_info.time;
f_end = signal_info.analysis_window_frames;

%% CALCULATE RASTER MATRIX FOR ONE DATASET

if active_cells == 0
    warning(['No active cells in timepoint ',timePointName,'. Raster no generated.'])
    raster = [];
    raster_fig = figure;
    return;
end

total_cells = size(smooth_signal,1); % total number of cells detected by NeuroCa

% create raster matrix
raster = zeros(total_cells, f_end);

% change a value in the raster matrix to 1 where there is a calcium spike peak
% run through peaks from every active cell
for i = 1 : size(pk_locs,1)
    cell_num = active_cells(i,1); % cell number

    for j = 1 : size(pk_locs(i,:),2)%sum(~isnan(pk_locs(i,:)))
        if isnan(pk_locs(i,j))
            continue
        end
        frame = pk_locs(i,j); % frame # of calcium peak
        raster(cell_num,frame) = 1;
    end
end

%% PLOT RASTER
raster_fig = figure;

for i = 1:total_cells
    plot(time_axis(1,1:f_end), i*raster(i,1:f_end),'k.','MarkerSize',4)
    hold on
end

xlabel('Time (s)')
ylabel('Cell #')
xlim([0 120])
ylim([0.5 size(raster,1)])
title(['Raster - ',timePointName])
hold off

end
